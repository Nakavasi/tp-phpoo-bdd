<?php
include "config.php";
function chargementBase(){
    try {
        //Informations pour se connecter à la base de données
        global $DB_HOST;
        global $DB_USER;
        global $DB_MDP;
        global $DB_NomBase;
        $hote = $DB_HOST;
        $utilisateur = $DB_USER;
        $motDePasse = $DB_MDP;
        $nomDeLaBase = $DB_NomBase;
        //Tentative de connexion à la base de données
        $connexion = new PDO("mysql:host=$hote;dbname=$nomDeLaBase", $utilisateur, $motDePasse);
        $connexion->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $connexion;
    } catch (PDOException $e) {
        // Si il y a une erreur de connexion on affiche le message d'erreur et on arrête le script
        echo "Erreur de connexion à la base de données: " . $e->getMessage();
        die();
    }
}
class Personnage{
    //On met en privé pour des raisons de sécurité
    private $nom;
    private $PV;
    private $PVMax;
    private $PA;
    private $PD;
    private $level=1;
    private $experience=0;
    private $competence;
    private $arme;
    private $argent=100;

    public function __construct($n,$pv,$pa,$pd,$c,$a){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PVMax= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->competence= $c;
        $this->arme=$a;
    }

    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }

    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getlevel(){
        return $this->level;
    }

    public function getexperience(){
        return $this->experience;
    }

    public function getcompetence(){
        return $this->competence;
    }
    public function getarme(){
        return $this->arme;
    }
    public function getargent(){
        return $this->argent;
    }
}


class Salle {
    //cette class permet de créer les salles et de passer à la salle suivante
    protected $typeSalle;
    protected $longueur;
    protected $largeur;
    protected function __construct($t,$lon,$lar){
        $this->typeSalle=$t;
        $this->longueur=$lon;
        $this->largeur=$lar;
    }
}

class Piege extends Salle{
    private $degats;

    public function __construct($lon,$lar,$d){
        parent::__construct("Piège",$lon,$lar);
        $this->degats=$d;
    }

    public function gettype(){
        return $this->typeSalle;
    }
    public function getlongeur(){
        return $this->longueur;
    }
    public function getlargeur(){
        return $this->largeur;
    }
    public function getdegats(){
        return $this->degats;
    }
}
class Marchand extends Salle{
    private $objet;
    private $marchandtrouver=false;


    public function __construct($lon,$lar,$o){
        parent::__construct("Marchand",$lon,$lar);
        $this->objet=$o;
    }

    public function gettype(){
        return $this->typeSalle;
    }
    public function getlongeur(){
        return $this->longueur;
    }
    public function getlargeur(){
        return $this->largeur;
    }
    public function getobjet(){
        return $this->objet;
    }
    
    public function echange(){
        if($this->$marchandtrouve == true)
        {
            apparaitreprogressivement("Vous avez trouvé un marchand !\n",30000);
            sleep(2);
            popen('cls','w');
            apparaitreprogressivement("Que souhaitez-vous faire ?\n",30000);
            apparaitreprogressivement("1-Acheter\n",10000);
            apparaitreprogressivement("2-Vendre\n",10000);
            apparaitreprogressivement("3-Ignorer\n",10000);
            apparaitreprogressivement("Choix:",10000);
            $choixMarchand=readline();
            popen('cls','w');
            if($choixMarchand==1){
                apparaitreprogressivement("Que souhaitez-vous acheter ?\n",30000);
                apparaitreprogressivement("1-".$itemrandom."\n",10000);
                apparaitreprogressivement("2-".$itemrandom."\n",10000);
                apparaitreprogressivement("3-".$itemrandom."\n",10000);
            }
            elseif($choixMarchand==2){
                echo"Quel item souhaitez-vous vendre ?\n";
                echo"Vous possédez ". $listeinventaire ." dans votre inventaire.\n";
                echo"Choix:";
                $choixVente=readline();
            }
        }
    }
}
class Repos extends Salle{
    private $camps;

    public function __construct($lon,$lar,$c){
        parent::__construct("Repos",$lon,$lar);
        $this->camps=$c;
    }

    public function __get($camps){
        return $this->camps;
    }

    //cette fonction permet de récupérer toute la vie du personnage
    public function recupererVie($personnage) {
        $personnage->setPV($personnage->getPVMax());
        apparaitreprogressivement("Vous vous reposez et récupérez toute votre vie.\n", 30000);
        sleep(1);
    }
}

Class SalleMonstre extends Salle{
    private $enemies;

    public function __construct($t, $lon, $lar, $enemies) {
        parent::__construct($t, $lon, $lar);
        $this->enemies = $enemies;
    }

    // Cette fonction permet de rencontrer un ennemi aléatoire
    public function rencontrerEnnemi($personnage) {
        $randomEnemy = $this->enemies[array_rand($this->enemies)]; // Sélection aléatoire d'un monstre à affronter
        apparaitreprogressivement("Vous rencontrez un ennemi : " . $randomEnemy->getnom() . "\n", 30000);
        sleep(1);

        // Lancement du combat
        combat($personnage, $randomEnemy);
    }
}

class Coffre extends Salle{

}

class monstre {
    //On met en private pour raison de sécurité
    protected $nom;
    protected $PV;
    protected $PVMax;
    protected $PA;
    protected $PD;
    protected $XPgagner;
    protected $drop;
    
    //On crée le constructeur
    public function __construct($n,$pv,$pa,$pd,$xp,$d){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PVMax= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->XPgagner= $xp;
        $this->drop=$d;
    }
    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }
    
    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getXPgagner(){
        return $this->XPgagner;
    }

    public function getdrop(){
        return $this->drop;
    }

    public function prendredegats($degat){
        $this->PV= $this->PV-$degat;
    }

    public function seDefend(){
        $this->PD= $this->PD*2;
    }
    public function neSeDefendPas(){
        $this->PD= $this->PD/2;
    }
}

class MonstreSpécial extends Monstre {
    //On crée les monstres spéciaux avec leurs attributs
    private $arme;
    private $competence;

    public function __construct($n, $pv, $pa, $pd, $xp, $d, $a, $c){
        parent::__construct($n, $pv, $pa, $pd, $xp, $d);
        $this->arme=$a;
        $this->competence=$c;
    }
    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }
    
    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getXPgagner(){
        return $this->XPgagner;
    }

    public function getdrop(){
        return $this->drop;
    }
    
    public function prendredegats($degat){
        $this->PV= $this->PV-$degat;
    }
}

class Objects{
    private $nom;
    private $type;
    private $statistique;

    public function __construct($n,$t,$s){
        $this->nom=$n;
        $this->type=$t;
        $this->statistique=$s;
    }

    public function getnom(){
        return $this->nom;
    }
    public function gettype(){
        return $this->type;
    }
    public function getstatistique(){
        return $this->statistique;
    }
}
function apparaitreprogressivement($texte,$temps){
    for ($i = 0; $i < strlen($texte); $i++) {
        echo $texte[$i];
        usleep($temps);
    }
}

function MonstreAttaque($monstre, $personnage) {
    $degat=$monstre->getPA();
    $defence=$personnage["PD"];
    $personnage["PV"]= $personnage["PV"]- round($degat/(round($defence/10)+1));
    apparaitreprogressivement($monstre->getnom()." vous attaque et vous subissez ".round($degat/round($defence/10)+1)." de dégats.\n",30000);
    sleep(1);
} 
function PersonnageAttaque($Personnage, $monstre) {
    $degat=$Personnage["PA"];
    $defence=$monstre->getPD();
    $monstre->prendredegats(round($degat/(round($defence/10)+1)));
    apparaitreprogressivement($defence."         Vous attaquez et vous infligez ".round($degat/(round($defence/10) +1))." de dégats.\n",30000);
    sleep(1);
}

function afficherStatsmonstre($monstre){
    apparaitreprogressivement("Voici les statistique de :". $monstre->getnom() ."\n",30000);
    apparaitreprogressivement("PV :". $monstre->getPV() ."/". $monstre->getPVMax() ."\n",10000);
    apparaitreprogressivement("Attaque :". $monstre->getPA() ."\n",10000);
    apparaitreprogressivement("Defence :". $monstre->getPD() ."\n",10000);
}

function afficherStatsPersonnage($Personnage){
    apparaitreprogressivement("Voici les statistique de :". $Personnage["nom"] ."\n",30000);
    apparaitreprogressivement("PV :". $Personnage["PV"] ."/". $Personnage["PVMAX"] ."\n",10000);
    apparaitreprogressivement("Attaque :". $Personnage["PA"] ."\n",10000);
    apparaitreprogressivement("Defence :". $Personnage["PD"] ."\n",10000);
}

function combat($Personnage, $Ennemie){
    apparaitreprogressivement("Vous entrez en combat.\n", 30000);
    sleep(2);
    while(true){
        popen('cls','w');
        $sedefend=false;
        $sedefendEnemy=false;
        afficherStatsPersonnage($Personnage);
        afficherStatsmonstre($Ennemie);
        apparaitreprogressivement("Que souhaitez-vous faire ?\n", 30000);
        apparaitreprogressivement("1-Attaquer\n", 10000);
        apparaitreprogressivement("2-Se défendre\n", 10000);
        apparaitreprogressivement("Choix:",10000);
        $choix = readline();
        popen('cls','w');
        $choixEnemy= random_int(1,10);
        if($choix==2){
            $Personnage["PD"]= $Personnage["PD"] *2;
            $sedefend=true;
            apparaitreprogressivement("Vous vous défendez !\n", 30000);
            sleep(1);
        }
        if($choixEnemy>4 && $choixEnemy<=8){
            $Ennemie->seDefend();
            $sedefendEnemy=true;
            apparaitreprogressivement("L'ennemi se défend.\n",30000);
            sleep(1);
        }
        if ($choix == 1) {
            PersonnageAttaque($Personnage, $Ennemie);
        }
        else if($choix==!2){
            apparaitreprogressivement("vous n'arrivez pas à choisir, vous passez donc votre tour.\n", 30000);
            sleep(1);
        }
        if($choixEnemy<=4){
            MonstreAttaque($Ennemie,$Personnage);
        }
        else if($choixEnemy>8){
            apparaitreprogressivement("Le monstre vous regarde fixement.",30000);
            sleep(1);
        }
    
        if ($Personnage["PV"] <= 0) {
            apparaitreprogressivement("Vous avez été vaincu !\n", 30000);
            break;
        } elseif ($Ennemie->getPV() <= 0) {
            apparaitreprogressivement("Vous avez vaincu le monstre !\n", 30000);
            break;
        }
        if ($sedefend){
            $Personnage["PD"]= $Personnage["PD"] /2;
        }
        if ($sedefendEnemy){
            $Ennemie->neSeDefendPas();
        }
    }
}

function LevelUp($Personnage){
    $PointsStats=3;
    // while($PointsStats!=0){
        
    // }
}

$Ennemies=[new monstre("squelette", 90, 5, 15, 20,[]), new monstre("zombie", 120, 15, 8, 25,[]), new monstre("gobelin", 70, 30, 10, 50,[]), new monstre("orc", 160, 50, 20, 100,[]), new monstre("démon", 200, 60, 30, 300,[])];
$Enemiesspeciaux=[new MonstreSpécial("Mimic",250,25,50,2500,["épée en obsidienne à deux mains",50,20],"langue",["Glouton",1.5]), new MonstreSpécial("Dragon",500,100,100,5000,["Espadon des dieux",90,18],"Lance-flammes",["Souffle de feu",2]), new MonstreSpécial("Golem",1000,200,200,10000,["Marteau de guerre",150,30],"Poing de pierre",["Poing de pierre",3])];
// $Ennemie[random_int(0,count($Ennemie)-1)];
//lancement du jeu
popen('cls','w');
// apparaitreprogressivement("Bienvenue à toi jeune aventurier !", 30000);
// sleep(2);
$long=15;
$lar=12;
apparaitreprogressivement(str_repeat("=",$long)."\n",5000);
for ($i=0; $i < $lar-2; $i++) { 
        apparaitreprogressivement("|",5000);
        apparaitreprogressivement(str_repeat(" ",$long-2),5000);
        apparaitreprogressivement("|"."\n",5000);
}
apparaitreprogressivement("Vous entrer dans la salle 12.\n",30000) 
apparaitreprogressivement(str_repeat("=",$long)."\n",5000);
// while(true){
//     popen('cls','w');
//     apparaitreprogressivement("Que souhaitez-vous faire:\n",30000);
//     apparaitreprogressivement("1-Continuer\n2-Nouvelle partie\n3-Quitter\n",10000);
//     apparaitreprogressivement("Choix:",10000);
//     $choix=readline();
//     popen('cls','w');
//     if($choix==1){
//         $requete = chargementBase()->query("SELECT * FROM Sauvegarde");
//         $Personnage= $requete->fetchall();
//         apparaitreprogressivement("Voici les sauvegardes: \n",30000);
//         foreach($Personnage as $Chargement){
//             if($Chargement["nom"]==NULL){
//                 apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": Vide\n",10000);
//             }
//             else{
//                 apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": ".$Chargement["nom"]."\n",10000);
//             }
//         }
//         apparaitreprogressivement("Choix:",10000);
//         $choix=readline();
//         popen('cls','w');
//         if($choix==1 || $choix==2 || $choix ==3){
//             $requete = chargementBase()->prepare("SELECT * FROM Sauvegarde WHERE ID=?");
//             $requete->execute([$choix]);
//             $Personnage= $requete->fetch();
//             $requete = chargementBase()->prepare("SELECT * FROM Arme WHERE IDSauvegarde=?");
//             $requete->execute([$choix]);
//             $arme= $requete->fetch();
//             while (true){
//                 if($Personnage["nom"]==NULL){
//                     //on vérifie si la sauvegarde est vide
//                     apparaitreprogressivement("Sauvegarde vide.\n",10000);
//                     sleep(2);
//                     break;
//                 }
//                 else{
//                     // Sélection aléatoire d'un monstre à affronter
//                     apparaitreprogressivement("Vous vous trouvez dans la salle ". $Personnage["Salle"] .".",30000);
//                     sleep(2);
//                     popen('cls','w');
//                     //Si on as est a une salle d'un multiple de 5 on est a une salle spéciale
//                     if($Personnage["Salle"]==10 || $Personnage["Salle"]==20){
//                         $PositionSalle=$SallesMarchant=[random_int(0,count($SallesMonstre)-1)];
//                         $PositionSalle->Lancement();
//                     }
//                     else if($Personnage["Salle"]==5 || $Personnage["Salle"]==15){
//                         $PositionSalle=$SallesRepos=[random_int(0,count($SallesMonstre)-1)];
//                         $PositionSalle->Lancement();
//                     }
//                     //Sinon on renconte une salle Monstre,Piege ou Coffre
//                     $typeSalle=random_int(1,10);
//                     if($typeSalle<=8){
//                         $PositionSalle=$SallesMonstre=[random_int(0,count($SallesMonstre)-1)];
//                         $PositionSalle->Lancement($Ennemies);
//                     }
//                     else if($typeSalle==9){
//                         $PositionSalle=$SallesPiege=[random_int(0,count($SallesMonstre)-1)];
//                         $PositionSalle->Lancement();
//                     }
//                     else if($typeSalle==10){
//                         $PositionSalle=$SalleCoffre=[random_int(0,count($SallesMonstre)-1)];
//                         $PositionSalle->Lancement();
//                     }
//                 }
//             }

//         }
//         else{
//             apparaitreprogressivement("Je n'ai pas compris votre demande \n",30000);
//             sleep(2);
//         }        
//     }
//     else if($choix==2){
//         $requete = chargementBase()->query("SELECT * FROM Sauvegarde");
//         $Personnage= $requete->fetchall();
//         apparaitreprogressivement("Choissisez la sauvegarde:\n",30000);
//         foreach($Personnage as $Chargement){
//             if($Chargement["nom"]==NULL){
//                 apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": Vide\n",10000);
//             }
//             else{
//                 apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": ".$Chargement["nom"]."\n",10000);
//             }
//         }
//         apparaitreprogressivement("Choix :",30000);
//         $choixsauvegarde=readline();
//         popen('cls','w'); 
//         if ($choixsauvegarde==1 || $choixsauvegarde==2 || $choixsauvegarde==3){
//             apparaitreprogressivement("Lancement d'une nouvelle partie sur la sauvegarde ".$choixsauvegarde.". \n",30000);
//             sleep(2);
//             popen('cls','w');
//             apparaitreprogressivement("Quel nom souhaitez-vous donner à votre personnage: ",30000);
//             $nom= readline("");
//             popen('cls','w');
//             //Crée un personnage dans la base de données
//             $Personnage= new Personnage($nom,100,10,5,[],["nom"=>"épée rouillée à une main","dégats"=>3]);
//             $requete =chargementBase()->prepare("UPDATE sauvegarde SET nom =?, PV =?, PVMAX =?, PA =?, PD =?, Niveau =?, Exp =?, Salle =?, Argent= ? WHERE ID= ?");
//             $requete->execute([$Personnage->getnom(),$Personnage->getPV(),$Personnage->getPVMax(),$Personnage->getPA(),$Personnage->getPD(),$Personnage->getlevel(), $Personnage->getexperience(),1,100,$choixsauvegarde]);
//             //Le recharge.
//             sleep(2);
//             $requete = chargementBase()->prepare("SELECT * FROM Sauvegarde WHERE ID=?");
//             $requete->execute([$choixsauvegarde]);
//             $Personnage= $requete->fetch();
//             apparaitreprogressivement("Bienvenue alors au donjon, ".$Personnage["nom"]." fais attention beaucoup sont morts dedans !",30000);
//             sleep(2);
//         }
//         else{
//             apparaitreprogressivement("Aucune sauvegarde choisie, retour au menu.",30000);
//             sleep(2);
//             popen('cls','w');
//         }
//     }
//     else if($choix==3){
//         apparaitreprogressivement("Au revoir jeune aventurier, on espère te revoir bientôt !\n",30000);
//         sleep(2);
//         popen('cls','w');
//         die();
//     }
//     else{
//         apparaitreprogressivement("Je n'ai pas compris votre demande. \n",30000);
//         sleep(2);
//     }
// }

?>