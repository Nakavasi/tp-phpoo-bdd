<?php
include "config.php";
try {
    //Informations pour se connecter a la base de donnée
    $hote = $DB_HOST;
    $utilisateur = $DB_USER;
    $motDePasse = $DB_MDP;
    $nomDeLaBase = $DB_NomBase;
    //Tentative de connection a la base de donnees
    $connexion = new PDO("mysql:host=$hote;dbname=$nomDeLaBase", $utilisateur, $motDePasse);
    $connexion->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
    // Si il y a une erreur de connexion, affiche le message d'erreur et arrete le script
    echo "Erreur de connexion à la base de données: " . $e->getMessage();
    die();
}
class Personnage{
    //On met en private pour raison de sécuriter
    private $nom;
    private $PV;
    private $PA;
    private $PD;
    private $level=1;
    private $experience=0;
    private $competence;
    private $arme;

    public function __construct($n,$pv,$pa,$pd,$c,$a){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->competence= $c;
        $this->arme=$a;
    }

    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }

    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getlevel(){
        return $this->level;
    }

    public function getexperience(){
        return $this->experience;
    }

    public function getcompetence(){
        return $this->competence;
    }
    public function getarme(){
        return $this->arme;
    }
}


class Salle {
    //cette class permet de créer les salles et de passer à la salle suivante
    private $salle;
    
    private $sallesuivante;
    
    public function __construct($s, $sv){
        $this->salle = $s;
        $this->sallesuivante = $sv;
    }
    
    
}

class SalleSpéciale extends Salle{
    //On ajoute les différents attributs des salles spéciales
    //Avec un monstre spécial qui sera invoqué si le joueur à la malchance de déclencher un piège à monstre
    private $piege;
    private $enigme;
    private $marchand;
    private $monstre;

    private $degatspieges = 10;

    private $choixmarchand;

    private $itemRandom;
    
    public function __construct($s, $sv, $p, $e, $m, $mo){
        parent::__construct($s, $sv);
        $this->piege = $p;
        $this->enigme = $e;
        $this->marchand = $m;
        $this->monstre = $mo;
    }
    
    public function getpiege(){
        return $this->piege;
    }
    
    public function getenigme(){
        return $this->enigme;
    }
    
    public function getmarchand(){
        return $this->marchand;
    }
    
    public function getmonstre(){
        return $this->monstre;
    }
    public function getsalle(){
        return $this->salle;
    }
    
    public function getsallesuivate(){
        return $this->sallesuivante;
    }
    
    public function EntréeEnSalle() {
        apparaitreprogressivement("Vous entrez dans la salle.\n",30000);
        apparaitreprogressivement("Vous regardez autour de vous :\n",30000);
        $random = rand(1,100);
        if ($random<=5){
            $this->piege = true;
        }
        elseif ($random>5 && $random<=10){
            $this->enigme = true;
        }
        elseif ($random>10 && $random<=15){
            $this->marchand = true;
        }
        elseif ($random>15 && $random<=95){
            $this->monstre = true;
        }
        else {
            apparaitreprogressivement("rien du tout, rien ne se passe. Vous pouvez continuer votre chemin.\n",30000);
        }
    }

    public function EnSalle(){
        if ($this->monstre == true){
            apparaitreprogressivement("Vous tombez face à un monstre dans la salle !\n",30000);
            apparaitreprogressivement("Un monstre spécial est invoqué !\n",30000);
            $this->monstre = true;
        }
        elseif ($this->piege == true){
            apparaitreprogressivement("Vous tombez dans un piège !\n",30000);
            apparaitreprogressivement("Vous perdez ". $this->degatspieges. " points de vie !\n", 30000);
            $this->piege = false;
        }
        elseif ($this->enigme == true){
            apparaitreprogressivement("Vous tombez sur une énigme !\n",30000);
            apparaitreprogressivement("Vous devez résoudre l'énigme pour continuer votre chemin !\n",30000);
            $this->enigme = false;
        }
        elseif ($this->marchand == true){
            apparaitreprogressivement("Vous tombez sur un marchand !\n", 30000);
            $itemRandom = rand(1,3);
            $choixmarchand = readline("Le marchand vend :\n1.".$itemRandom."\n2.".$itemRandom. "\n". "3.". $itemRandom. "\n");
            if ($choixmarchand == 1){
                apparaitreprogressivement("Vous achetez l'item 1 !\n",30000);
            }
            elseif ($choixmarchand == 2){
                apparaitreprogressivement("Vous achetez l'item 2 !\n",30000);
            }
            elseif ($choixmarchand == 3){
                apparaitreprogressivement("Vous achetez l'item 3 !\n",30000);
            }
            else {
                apparaitreprogressivement("Vous avez décidé de ne rien acheter au marchand\n",30000);
            }
            $this->marchand = false;
        }
        else {
            apparaitreprogressivement("rien du tout, rien ne se passe. Vous pouvez continuer votre chemin.\n",30000);
        }

    }


}

class monstre {
    //On met en private pour raison de sécurité
    protected $nom;
    protected $PV;
    protected $PA;
    protected $PD;
    protected $XPgagner;
    protected $drop;
    
    //On crée le constructeur
    protected function __construct($n,$pv,$pa,$pd,$xp,$d){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->XPgagner= $xp;
        $this->drop=$d;
    }

}

class MonstreSpécial extends Monstre {
    //On crée les monstres spéciaux avec leurs attributs
    private $arme;
    private $competence;

    public function __construct($n, $pv, $pa, $pd, $xp, $d, $a, $c){
        parent::__construct($n, $pv, $pa, $pd, $xp, $d);
        $this->arme=$a;
        $this->competence=$c;
    }
    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    
    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getXPgagner(){
        return $this->XPgagner;
    }

    public function getdrop(){
        return $this->drop;
    }
}

class Objects{
    private $nom;
    private $type;
    private $statistique;

    public function __construct($n,$t,$s){
        $this->nom=$n;
        $this->type=$t;
        $this->statistique=$s;
    }

    public function getnom(){
        return $this->nom;
    }
    public function gettype(){
        return $this->type;
    }
    public function getstatistique(){
        return $this->statistique;
    }
}
function apparaitreprogressivement($texte,$temps){
    for ($i = 0; $i < strlen($texte); $i++) {
        echo $texte[$i];
        usleep($temps);
    }
}

function combat($Personnage,$Ennemie){
    
}

//lancement du jeu
popen('cls','w');
apparaitreprogressivement("Bienvenue à toi jeune aventurier !", 5);
sleep(2);
while(true){
    popen('cls','w');
    apparaitreprogressivement("Que souhaitez-vous faire:\n",30000);
    apparaitreprogressivement("1-Continuer\n2-Nouvelle partie\n3-Quitter\n",10000);
    $choix=readline("Choix: ");
    popen('cls','w');
    if($choix==1){
        apparaitreprogressivement("Voici les sauvegardes: \n",30000);
        apparaitreprogressivement("Sauvegarde 1:\n",10000);
        apparaitreprogressivement("Sauvegarde 2:\n",10000);
        apparaitreprogressivement("Sauvegarde 3:\n",10000);
        apparaitreprogressivement("Choix :\n",10000);
        $choix=readline("");
        if($choix==1){
            $requete = $bdd->prepare("SELECT * FROM Sauvegarde WHERE ID=?");
            $requete->execute([$choix]);
            $Personnage= $requete->fetch();
            $requete = $bdd->prepare("SELECT * FROM Arme WHERE IDSauvegarde=?");
            $requete->execute([$choix]);
            $arme= $requete->fetch();
            
        }
        else if($choix==2){

        }
        else if($choix==3){

        }
        else{
            apparaitreprogressivement("Je n'ai pas compris votre demande \n",30000);
            sleep(2);
        }

        
    }
    else if($choix==2){
        apparaitreprogressivement("Lancement d'une nouvelle partie: \n",30000);
        sleep(2);
        popen('cls','w');
        apparaitreprogressivement("Quel est votre nom ? : ",30000);
        $nom= readline("");
        popen('cls','w');
        $Personnage= new Personnage($nom,100,10,5,[],["nom"=>"épée rouillée à une main","dégats"=>3]);
        apparaitreprogressivement("Bienvenue alors au donjon ".$nom." fais attention beaucoup sont morts dedans.",30000);
        sleep(2);
    }
    else if($choix==3){
        apparaitreprogressivement("Au revoir jeune aventurier. \n",30000);
        sleep(2);
        popen('cls','w');
        die();
    }
    else{
        apparaitreprogressivement("Je n'ai pas compris votre demande \n",30000);
        sleep(2);
    }
}
?>